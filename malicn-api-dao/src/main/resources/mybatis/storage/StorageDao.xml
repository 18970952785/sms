<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.malicn.server.dao.storage.StorageDao">
  <resultMap id="BaseResultMap" type="com.malicn.server.domain.storage.Storage">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="is_hot" jdbcType="TINYINT" property="isHot"/>
    <result column="region_code" jdbcType="VARCHAR" property="regionId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="en_name" jdbcType="VARCHAR" property="enName"/>
    <result column="is_deleted" jdbcType="VARCHAR" property="isDeleted"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, type, user_id, name, region_code, address,en_name, create_time, update_time
  </sql>
  <!-- 查询单条冷库 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select a.id, a.type, a.user_id, a.name, a.region_code, a.address,b.short_name as regionName from ml_storage a
    left join ml_region b on a.region_code=b.id
    where a.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from ml_storage
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <!-- 新增我的冷库 -->
  <insert id="insert" parameterType="com.malicn.server.domain.storage.Storage" useGeneratedKeys="true" keyProperty="id">
      INSERT  INTO ml_storage(type,user_id,name,region_code,address,en_name,create_time)
      VALUES (#{type}, #{userId},#{name}, #{regionId}, #{address},#{enName}, now())
  </insert>
  <insert id="insertSelective" parameterType="com.malicn.server.domain.storage.Storage"  useGeneratedKeys="true" keyProperty="id">
    insert into ml_storage
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="regionId != null">
        region_code,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="enName != null">
        en_name,
      </if>
        create_time,


    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="regionId != null">
        #{regionId,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="enName != null">
        #{enName,jdbcType=VARCHAR},
      </if>
      now(),

    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.malicn.server.domain.storage.Storage">
    update ml_storage
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="regionId != null">
        region_code = #{regionId,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="enName != null">
        en_name =#{enName,jdbcType=VARCHAR},
      </if>
        update_time = now()
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.malicn.server.domain.storage.Storage">
    update ml_storage
    set type = #{type,jdbcType=TINYINT},
      user_id = #{userId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      region_code = #{regionId,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <!--  修改  -->
  <update id="updateIsDeleteById" parameterType="java.lang.Long">
      update ml_storage set is_deleted=1 where id=#{strgId}
  </update>
  <!-- 查询冷库列表 -->
  <select id="selectStrgList" resultMap="BaseResultMap" parameterType="java.lang.Long">
      select a.id, a.type, a.user_id, a.name, a.region_code, a.address,a.en_name, a.create_time, a.update_time,b.short_name as regionName from ml_storage a
      left join ml_region b on a.region_code=b.id
      where a.user_id=#{userId} and a.is_deleted=0 ORDER BY a.en_name ASC
  </select>
  <!-- 新增的时候根据userId、冷库名称、冷库所在城市代码查询相对应的冷库 -->
  <select id="selectByParamForInsert" resultMap="BaseResultMap" parameterType="com.malicn.server.domain.storage.Storage">
      select <include refid="Base_Column_List" /> from ml_storage where user_id=#{userId} and name=#{name} and region_code=#{regionId} and is_deleted=0
  </select>
  <!-- selectByParamForUpdate 修改的时候根据userId、冷库名称、冷库所在城市代码查询相对应的冷库  -->
  <select id="selectByParamForUpdate" resultMap="BaseResultMap" parameterType="com.malicn.server.domain.storage.Storage">
    select <include refid="Base_Column_List" /> from ml_storage where user_id=#{userId} and name=#{name} and region_code=#{regionId} and is_deleted=0 and id!=#{id}
  </select>
  <!-- 创建订单时查询系统冷库和我的冷库列表 -->
  <select id="listSysMyStrg" resultMap="BaseResultMap">
    select a.id, a.type, a.user_id, a.name, a.region_code, a.address,a.en_name, a.create_time, a.update_time,b.short_name as regionName from ml_storage a
    left join ml_region b on a.region_code=b.id
    where (a.user_id=#{userId} OR a.type=1)
    and a.region_code=#{regionId}
    and a.is_deleted=0 ORDER BY a.en_name ASC
  </select>
  <!-- 根据冷库名称模糊查询冷库信息 -->
  <select id="listStrgByName" resultMap="BaseResultMap">
    select a.id, a.type, a.user_id, a.name, a.region_code, a.address,a.en_name, a.create_time, a.update_time,b.short_name as regionName from ml_storage a
    left join ml_region b on a.region_code=b.id
    where (a.user_id=#{userId} OR a.type=1)
    and( LOCATE(#{strgName},a.name) > 0)
    and a.is_deleted=0
    and a.region_code=#{regionId}
    ORDER BY a.en_name ASC
  </select>

  <!-- 查询热门冷库 查询系统冷库并且是热门冷库 -->
  <select id="listHotStrg" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select id, name, address from ml_storage
     where type=1 and is_hot=1 and region_code=#{regionId}
  </select>

  <select id="getStorageAddress" resultMap="BaseResultMap" >
    SELECT   a.id, a.type, a.user_id, a.name, a.region_code, a.address,b.short_name as regionName
    FROM  ml_storage a
    INNER JOIN ml_region b ON b.id = a.region_code
    WHERE 1=1
    <if test="wd !=null and wd !=''">
      AND  (a.name like CONCAT('%',#{wd},'%' ) or a.address  like CONCAT('%',#{wd},'%' ))
    </if>
    LIMIT 50
  </select>

  <select id="selectAllList" resultMap="BaseResultMap">
SELECT
    a.id,
	a.name,
	a.address,
	b.short_name as enName,
	a.type,
    c.name as creatorName,
	a.create_time,
    a.update_time
FROM
	ml_storage a
INNER JOIN ml_region b ON b.id = a.region_code
left join cms_sys_admin c on c.id=a.user_id
where a.type=1
<if test="regionId !=null and regionId !=''">
  AND  a.region_code=#{regionId}
</if>
    <if test="storageName !=null and storageName !=''">
      AND  a.name like CONCAT('%',#{storageName},'%' )
     </if>
    ORDER BY a.create_time desc
  </select>

</mapper>